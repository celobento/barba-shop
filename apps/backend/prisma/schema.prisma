// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           Int           @id @default(autoincrement())
  nome         String
  email        String        @unique
  senha        String
  telefone     String
  barbeiro     Boolean
  agendamentos Agendamento[]

  @@map("usuario")
}

enum TipoPessoa {
  FISICA
  JURIDICA
}

enum Sexo {
  MASCULINO
  FEMININO
}

enum EstadoCivil {
  SOLTEIRO
  CASADO
  VIUVO
  DIVORCIADO
}

model Profissional {
  id                   Int                   @id @default(autoincrement())
  nome                 String                @db.VarChar(255)
  nomeFantasia         String                @db.VarChar(255)
  email                String                @db.VarChar(255)
  dataNascimento       DateTime              @db.Timestamptz(3)
  tipoPessoa           TipoPessoa
  estadoCivil          EstadoCivil
  cpfCnpj              String                @unique @db.VarChar(14)
  sexo                 Sexo
  descricao            String
  imagemUrl            String
  avaliacao            Float
  quantidadeAvaliacoes Int
  agendamentos         Agendamento[]
  servicosProfissional ServicoProfissional[]

  @@map("profissional")
}

model Servico {
  id                   Int                   @id @default(autoincrement())
  nome                 String                @unique
  descricao            String
  preco                Float
  qtdeSlots            Int
  imagemURL            String                @default("NONE")
  agendamentos         Agendamento[]
  servicosProfissional ServicoProfissional[]

  @@map("servico")
}

model Agendamento {
  id             Int          @id @default(autoincrement())
  data           DateTime     @db.Timestamptz(3)
  profissional   Profissional @relation(fields: [profissionalId], references: [id])
  profissionalId Int
  servicos       Servico[]
  usuario        Usuario      @relation(fields: [usuarioId], references: [id])
  usuarioId      Int

  @@map("agendamento")
}

enum Status {
  ATIVO
  INATIVO
}

enum TipoRepasse {
  PERCENTUAL
  VALOR
}

model ServicoProfissional {
  id                 Int          @id @default(autoincrement())
  dataAdicao         DateTime     @default(now())
  dataRemocao        DateTime     @db.Timestamptz(3)
  responsavelAdicao  String       @db.VarChar(255)
  responsavelRemocao String       @db.VarChar(255)
  status             Status       @default(ATIVO)
  repasse            Decimal      @db.Decimal(9, 2)
  tipoRepasse        TipoRepasse  @default(PERCENTUAL)
  profissional       Profissional @relation(fields: [profissionalId], references: [id])
  profissionalId     Int
  servico            Servico      @relation(fields: [servicoId], references: [id])
  servicoId          Int

  @@map("servicoProfissional")
}
